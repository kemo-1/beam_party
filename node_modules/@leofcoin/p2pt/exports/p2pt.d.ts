/**
 * Peer 2 Peer WebRTC connections with WebTorrent Trackers as signalling server
 * Copyright Subin Siby <mail@subinsb.com>, 2020
 * Licensed under MIT
 */
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import WebSocketTracker from 'bittorrent-tracker/lib/client/websocket-tracker.js';
import EventEmitter from 'events';
import { Instance } from 'simple-peer';
export declare type AnnounceOptions = {
    numwant?: number;
    uploaded?: number;
    downloaded?: number;
};
export declare type ResponseWaitingResponse = ([peer, msg]: [peer: Instance, msg: any]) => Promise<[Instance, any]>;
declare class P2PT extends EventEmitter {
    #private;
    announceURLs: string[];
    trackers: {
        [index: string]: WebSocketTracker;
    };
    peers: {
        [index: string]: {
            [index: string]: Instance;
        };
    };
    msgChunks: {};
    responseWaiting: {
        [index: string]: {
            [index: string]: ResponseWaitingResponse;
        };
    };
    _peerIdBuffer: Buffer | Uint8Array;
    _peerId: string;
    _peerIdBinary: string;
    identifierString: string;
    infoHash: string;
    _infoHashBuffer: Buffer | Uint8Array;
    _infoHashBinary: string;
    /**
     *
     * @param array announceURLs List of announce tracker URLs
     * @param string identifierString Identifier used to discover peers in the network
     */
    constructor(announceURLs?: any[], identifierString?: string, peerId?: Uint8Array, maxPeerChannels?: number);
    /**
     * Set the identifier string used to discover peers in the network
     * @param string identifierString
     */
    setIdentifier(identifierString: any): void;
    /**
     * Connect to network and start discovering peers
     */
    start(): void;
    /**
     * Add a tracker
     * @param string announceURL Tracker Announce URL
     */
    addTracker(announceURL: any): void;
    /**
     * Remove a tracker without destroying peers
     */
    removeTracker(announceURL: any): void;
    /**
     * Remove a peer from the list if all channels are closed
     * @param integer id Peer ID
     */
    _removePeer(peer: any): boolean;
    _trySend(peer: any, data: any): void;
    /**
     * Send a msg and get response for it
     * @param Peer peer simple-peer object to send msg to
     * @param string msg Message to send
     * @param integer msgID ID of message if it's a response to a previous message
     */
    send(peer: any, msg: any, msgID?: string): Promise<unknown>;
    /**
     * Request more peers
     */
    requestMorePeers(): Promise<unknown>;
    /**
     * Get basic stats about tracker connections
     */
    getTrackerStats(): {
        connected: number;
        total: number;
    };
    /**
     * Destroy object
     */
    destroy(): void;
    /**
     * A custom function binded on Peer object to easily respond back to message
     * @param Peer peer Peer to send msg to
     * @param integer msgID Message ID
     */
    _peerRespond(peer: any, msgID: any): (msg: any) => Promise<unknown>;
    /**
     * Handle msg chunks. Returns false until the last chunk is received. Finally returns the entire msg
     * @param object data
     */
    _chunkHandler(data: any): any;
    /**
     * Remove all stored chunks of a particular message
     * @param integer msgID Message ID
     */
    _destroyChunks(msgID: any): void;
    /**
     * Default announce options
     * @param object opts Options
     */
    _defaultAnnounceOpts(options?: AnnounceOptions): AnnounceOptions;
    /**
     * Initialize trackers and fetch peers
     */
    _fetchPeers(): void;
}
export { P2PT as default };
